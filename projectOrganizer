# project organizer

import os
import errno
import maya.standalone # Allows you to use Maya without the UI
import maya.cmds as cmds
import shutil

maya.standalone.initialize("Python")

class ProjectOrganizer():

  def __init__(self, userDir, projectName):
  	self.userDir = userDir
	self.projectName = projectName

  def makeNewProject(self, program): # Making all the new directories and setup for a new project
  	if os.path.exists(self.userDir):
  		self.projectDir =  os.path.join(self.userDir, 'Projects/Active/', self.projectName)

  		os.makedirs(self.projectDir + '/2D/Concepts')
  		os.makedirs(self.projectDir + '/2D/Textures')
  		os.makedirs(self.projectDir + '/2D/Comps')
  		os.makedirs(self.projectDir + '/2D/Renders')

  		os.makedirs(self.projectDir + '/3D/Models/Characters')
  		os.makedirs(self.projectDir + '/3D/Models/Environments')
  		os.makedirs(self.projectDir + '/3D/Models/Props')
  		os.makedirs(self.projectDir + '/3D/Rigs/Props')
  		os.makedirs(self.projectDir + '/3D/Rigs/Characters')
  		os.makedirs(self.projectDir + '/3D/Animations')

  		if 'maya' in program:
  			newWorkspace = os.path.join(self.projectDir, '/3D')
  			cmds.workspace(dir=newWorkspace)

  		os.makedirs(self.projectDir + '/Scripts')
  		os.makedirs(self.projectDir + '/Documentation')

  def makeNewRepo(sef): # Making all new repository for projects
  	try:
  		os.makedirs(self.userDir + '/Projects/Active') # Main repository for active projects.
  		if self.projectName:
  			makeNewProject()

  		os.makedirs(self.userDir + '/Projects/Inactive') # Main repository for inactive projects

  		os.makedirs(self.userDir + '/Projects/Global') # Main repository for global resources
  		os.makedirs(self.userDir + '/Projects/Global/2D/Concepts')
  		os.makedirs(self.userDir + '/Projects/Global/2D/Textures')
  		#os.makedirs(self.userDir + '/Projects/Global/3D/Models/Maya')
  		#os.makedirs(self.userDir + '/Projects/Global/3D/Models/Houdini')
  		#os.makedirs(self.userDir + '/Projects/Global/3D/Models/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Props/Maya')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Props/Houdini')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Props/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Environments/Maya')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Environments/Houdini')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Models/Environments/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Rigs/Maya')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Rigs/Houdini')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Rigs/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Animations/Maya')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Animations/Houdini')
  		os.makedirs(self.userDir + '/Projects/Global/3D/Animations/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/Python/Scripts/Maya')
  		os.makedirs(self.userDir + '/Projects/Global/Python/Scripts/Houdini')
  		os.makedirs(self.userDir + '/Projects/Global/Python/Scripts/Katana')
  		os.makedirs(self.userDir + '/Projects/Global/Python/Scripts/Blender')
  		os.makedirs(self.userDir + '/Projects/Global/Python/Scripts/Nuke')

  	except OSError as exception:
  		if exception.errno != errno.EEXIST:
  			raise

  def newAsset(self, assetName, assetType, relatedFiles): # New asset organization and documentation
  	if 'Model' in assetType:
  		if 'Character' in assetType:
  			newDir = os.path.join(self.projectDir, '/3D/Models/Character/', assetName)
  			os.makedirs(newDir)

  			# Create Maya file
  			fileName = os.path.join('/3D/Models/Character/', assetName + '_mod-01.ma')
  			cmds.file(new=True, force=True)
  			cmds.file(rename=fileName)
  			cmds.file(save=True, type='mayaAscii')

  			os.makedirs(newDir + '/Textures')
  			os.makedirs(newDir + '/Reference')
  		elif 'Environment' in assetType:
  			newDir = os.path.join(self.projectDir, '/3D/Models/Environments/', assetName)
  			os.makedirs(newDir)

  			# Create Maya file
  			fileName = os.path.join('/3D/Models/Environments/Model/', assetName + '_env-01.ma')
  			cmds.file(new=True, force=True)
  			cmds.file(rename=fileName)
  			cmds.file(save=True, type='mayaAscii')

  			os.makedirs(newDir + '/Textures')
  			os.makedirs(newDir + '/Reference')
  		elif 'Prop' in assetType:
  			newDir = os.path.join(self.projectDir, '/3D/Models/Props/', assetName)
  			os.makedirs(newDir)

  			# Create Maya file
  			fileName = os.path.join('/3D/Models/Props/Model/', assetName + '_mod_prop-01.ma')
  			cmds.file(new=True, force=True)
  			cmds.file(rename=fileName)
  			cmds.file(save=True, type='mayaAscii')

  			os.makedirs(newDir + '/Textures')
  			os.makedirs(newDir + '/Reference')

  	if 'Rig' in assetType:
  		if 'Character' in assetType:
  			newDir = os.path.join(self.projectDir, '/3D/Rigs/Character/', assetName)
  			os.makedirs(newDir)
  			modelDir = os.path.join(newDir, '/Model')
  			# Then it should copy over files needed
  			if relatedFiles:
  				for relatedFile in relatedFiles:
  					copyfile(relatedFile, modelDir)

  			modFile = ''
  			for root, dirs, files in os.walk(modelDir):
  				for file in files:
  					if '_mod' in file:
  						modFile = file


  			# Create Maya file with references
  			fileName = os.path.join('/3D/Rigs/Character/', assetName + '_rig-01.ma')
  			cmds.file(new=True, force=True)
  			cmds.file(rename=fileName)
  			cmds.file(reference=modFile)
  			cmds.file(save=True, type='mayaAscii')

  		elif 'Prop' in assetName;
  			newDir = os.path.join(self.projectDir, '/3D/Rigs/Prop/', assetName)
  			os.makedirs(newDir)
  			modelDir = os.path.join(newDir, '/Model')
  			# Then it should copy over files needed
  			if relatedFiles:
  				for relatedFile in relatedFiles:
  					copyfile(relatedFile, modelDir)

  			modFile = ''
  			for root, dirs, files in os.walk(modelDir):
  				for file in files:
  					if '_mod' in file:
  						modFile = file


  			# Create Maya file with references
  			fileName = os.path.join('/3D/Rigs/Prop/', assetName + '_rig_prop-01.ma')
  			cmds.file(new=True, force=True)
  			cmds.file(rename=fileName)
  			cmds.file(reference=modFile)
  			cmds.file(save=True, type='mayaAscii')

  	if 'Animation' in assetType:
		newDir = os.path.join(self.projectDir, '/3D/Animations/', assetName)
		os.makedirs(newDir)
		rigDir = os.path.join(newDir, '/Rigs')
		envDir = os.path.join(newDir, '/Environment')
		# Then it should copy over files needed
		if relatedFiles:
			for relatedFile in relatedFiles:
				if 'Environment' in relatedFile:
					copyfile(relatedFile, envDir)
				elif 'Rig' in relatedFile:
					copyfile(relatedFile, rigDir)

		rigFile = ''
		envFile = ''
  			for root, dirs, files in os.walk(modelDir):
  				for file in files:
  					if '_rig' in file:
 						rigFile = file
  					elif '_env' in file:
  						envFile = file

  		# Create Maya file with references
  		fileName = os.path.join('/3D/Animations/', assetName + '_ani-01.ma')
  		cmds.file(new=True, force=True)
  		cmds.file(rename=fileName)
  		cmds.file(reference=rigFile)
  		cmds.file(reference=envFile)
  		cmds.file(save=True, type='mayaAscii')

  def finalAsset(self, assetName, assetFile, program): # Creating a final/locked version of the asset
  	if 'maya' in program:
  		name = assetName.split('-')
  		lockedName = name[0] + '-final.ma'
  		cmds.file(assetFile, open=True)
  		cmds.file(rename=lockedName)
  		cmds.file(lockFile=True)
  		cmds.file(save=True, type='mayaAscii')

  def backupAsset(self): # A feature that allows for backing up at the end of each session
  	pass

  def makeGlobal(self, assetDir, assetFile, destDir): # A feature to move a finaled asset to the Global dir
  	if 'final' not in assetFile:
  		print 'Only final assets will be placed in Global.' # For now focus on getting only final versions.
  	else:
	  	try:
	  		shutil.copytree(assetDir, destDir) # Move the all files connected to asset, may change to be specific
	  										   # set of files. Still working it out.
	  	except OSError as exception:
	  		if exception.errno == errno.ENOTDIR:
	  			shutil.copy(assetDir, destDir)
	  		else:
	  			raise

  def passAsset(self): # A feature that allows for copying and pasting items in different dirs
  	pass

  def archiveProject(self, oldProject): # For ending projects without deleting them
  	archiveDir = os.path.join(self.userDir, '/Projects/Inactive')
  	try:
  		shutil.copytree(oldProject, archiveDir) # Move the project files to the archive
  		shutil.rmtree(oldProject) # Delete the original because a copy/backup has been made
  	except OSError as exception:
  		if exception.errno == errno.ENOTDIR:
  			shutil.copy(oldProject, archiveDir)
  		else:
  			raise
  	
